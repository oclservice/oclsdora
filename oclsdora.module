<?php

/**
 * @file
 * Customizations for the Ontario Colleges Library Service.
 */

/**
 * Implements hook_menu().
 */
function oclsdora_menu() {
  return array(
    'ip_embargoed/%' => array(
      'title' => 'IP Embargoed',
      'description' => 'Endpoint serving up information about whether an item is IP embargoed.',
      'page callback' => 'oclsdora_ip_embargoed_callback',
      'page arguments' => array(1),
      'access callback' => TRUE,
      'file' => 'includes/ip_embargoed.inc',
      'type' => MENU_CALLBACK,
    ),
  );
}

/**
 * Implements hook_islandora_xml_form_builder_form_associations().
 */
function oclsdora_islandora_xml_form_builder_form_associations() {
  $associations = array(
    'bceln_artwork_form' => array(
      'content_model' => 'islandora:sp_large_image_cmodel',
      'form_name' => 'BC ELN Artwork Form',
      'dsid' => 'MODS',
      'title_field' => array('titleInfo', 'title'),
      'transform' => 'mods_to_dc.xsl',
      'self_transform' => 'islandora_cleanup_mods_extended.xsl',
      'template' => FALSE,
    ),
    'bceln_audio_form' => array(
      'content_model' => 'islandora:sp-audioCModel',
      'form_name' => 'BC ELN Audio Form',
      'dsid' => 'MODS',
      'title_field' => array('titleInfo', 'title'),
      'transform' => 'mods_to_dc.xsl',
      'self_transform' => 'islandora_cleanup_mods_extended.xsl',
      'template' => FALSE,
    ),
    'bceln_basic_image_form' => array(
      'content_model' => 'islandora:sp_basic_image',
      'form_name' => 'BC ELN Basic Image Form',
      'dsid' => 'MODS',
      'title_field' => array('titleInfo', 'title'),
      'transform' => 'mods_to_dc.xsl',
      'self_transform' => 'islandora_cleanup_mods_extended.xsl',
      'template' => FALSE,
    ),
    'bceln_citation_form' => array(
      'content_model' => 'ir:citationCModel',
      'form_name' => 'BC ELN Citation Form',
      'dsid' => 'MODS',
      'title_field' => array('titleInfo', 'title'),
      'transform' => 'mods_to_dc.xsl',
      'self_transform' => 'islandora_cleanup_mods_extended.xsl',
      'template' => FALSE,
    ),
    'bceln_newspaper_issue_form' => array(
      'content_model' => 'islandora:newspaperIssueCModel',
      'form_name' => 'BC ELN Newspaper Issue Form',
      'dsid' => 'MODS',
      'title_field' => array('titleInfo', 'title'),
      'transform' => 'mods_to_dc.xsl',
      'self_transform' => 'islandora_cleanup_mods_extended.xsl',
      'template' => FALSE,
    ),
    'bceln_thesis_form' => array(
      'content_model' => 'ir:thesisCModel',
      'form_name' => 'BC ELN Thesis Form',
      'dsid' => 'MODS',
      'title_field' => array('titleInfo', 'title'),
      'transform' => 'mods_to_dc.xsl',
      'self_transform' => 'islandora_cleanup_mods_extended.xsl',
      'template' => FALSE,
    ),
    'bceln_video_form' => array(
      'content_model' => 'islandora:sp_videoCModel',
      'form_name' => 'BC ELN Video Form',
      'dsid' => 'MODS',
      'title_field' => array('titleInfo', 'title'),
      'transform' => 'mods_to_dc.xsl',
      'self_transform' => 'islandora_cleanup_mods_extended.xsl',
      'template' => FALSE,
    ),
    'bceln_serials_form_root_serial' => array(
      'content_model' => 'islandora:rootSerialCModel',
      'form_name' => 'BC ELN Serials Form',
      'dsid' => 'MODS',
      'title_field' => array('titleInfoTab', 'titleInfoPanel', 'titleInfo'),
      'transform' => 'mods_to_dc.xsl',
      'self_transform' => 'islandora_cleanup_mods_extended.xsl',
      'template' => FALSE,
    ),
    'bceln_serials_form_stub' => array(
      'content_model' => 'islandora:intermediateSerialCModelStub',
      'form_name' => 'BC ELN Serials Form',
      'dsid' => 'MODS',
      'title_field' => array('titleInfoTab', 'titleInfoPanel', 'titleInfo'),
      'transform' => 'mods_to_dc.xsl',
      'self_transform' => 'islandora_cleanup_mods_extended.xsl',
      'template' => FALSE,
    ),
    'bceln_serials_form_intermediate' => array(
      'content_model' => 'islandora:intermediateCModel',
      'form_name' => 'BC ELN Serials Form',
      'dsid' => 'MODS',
      'title_field' => array('titleInfoTab', 'titleInfoPanel', 'titleInfo'),
      'transform' => 'mods_to_dc.xsl',
      'self_transform' => 'islandora_cleanup_mods_extended.xsl',
      'template' => FALSE,
    ),
  );
  // Build up associations for Base MODS form & OCLS MODS Submission forms.
  $base_models = array(
    'audio' => 'islandora:sp-audioCModel',
    'video' => 'islandora:sp_videoCModel',
    'pdf' => 'islandora:sp_pdf',
    'binary' => 'islandora:binaryObjectCModel',
    'collection' => 'islandora:collectionCModel',
    'large_image' => 'islandora:sp_large_image_cmodel',
    'book' => 'islandora:bookCModel',
    'basic_image' => 'islandora:sp_basic_image',
    'document' => 'islandora:sp_document_collection',
  );
  $submission_models = $base_models + array(
    'compound' => 'islandora:compoundCModel',
  );
  $mods_base = array(
    'form_name' => 'OCLS Base MODS Form',
    'dsid' => 'MODS',
    'title_field' => array('titles', '0', 'title'),
    'transform' => 'mods_to_dc.xsl',
    'template' => FALSE,
    'self_transform' => 'islandora_cleanup_mods_extended.xsl',
  );
  $ocls_mods_submission = array(
    'form_name' => 'OCLS Submission MODS Form',
    'dsid' => 'MODS',
    'title_field' => array('titles_fieldset', 'titleInfo', '0', 'title'),
    'transform' => 'mods_to_dc.xsl',
    'self_transform' => 'ocls_cleanup_mods_extended.xslt',
    'template' => FALSE,
  );
  foreach ($base_models as $key => $model) {
    $associations["base_mods_$key"] = array(
      'content_model' => $model,
    ) + $mods_base;
  }
  foreach ($submission_models as $key => $model) {
    $associations["ocls_submission_mods_$key"] = array(
      'content_model' => $model,
    ) + $ocls_mods_submission;
  }
  return $associations;
}

/**
 * Implements hook_islandora_xml_form_builder_forms().
 */
function oclsdora_islandora_xml_form_builder_forms() {
  $module_path = drupal_get_path('module', 'oclsdora');
  return array(
    'BC ELN Artwork Form' => array(
      'form_file' => "$module_path/xml/bceln_artwork_form.xml",
    ),
    'BC ELN Audio Form' => array(
      'form_file' => "$module_path/xml/bceln_audio_form.xml",
    ),
    'BC ELN Basic Image Form' => array(
      'form_file' => "$module_path/xml/bceln_basc_image_form.xml",
    ),
    'BC ELN Citation Form' => array(
      'form_file' => "$module_path/xml/bceln_citation_form.xml",
    ),
    'BC ELN Newspaper Issue Form' => array(
      'form_file' => "$module_path/xml/bceln_newspaper_issue_form.xml",
    ),
    'BC ELN Thesis Form' => array(
      'form_file' => "$module_path/xml/bceln_thesis_form.xml",
    ),
    'BC ELN Video Form' => array(
      'form_file' => "$module_path/xml/bceln_video_form.xml",
    ),
    'BC ELN Serials Form' => array(
      'form_file' => "$module_path/xml/bceln_serials_form.xml",
    ),
    'OCLS Base MODS Form' => array(
      'form_file' => "$module_path/xml/ocls_base_mods_form.xml",
    ),
    'OCLS Submission MODS Form' => array(
      'form_file' => "$module_path/xml/ocls_submission_mods_form.xml",
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds autocomplete for the custom bceln citation and thesis forms.
 */
function oclsdora_form_xml_form_builder_datastream_form_alter(&$form, &$form_state, $form_id) {
  if (module_exists('islandora_scholar') && module_exists('islandora_entities')) {
    module_load_include('inc', 'islandora_entities', 'includes/utilities');
    if (isset($form_state['association']['id'])) {
      $id = $form_state['association']['id'];
      if (strcmp($id, 'bceln_citation_form') == 0) {
        islandora_entities_add_autocompletes_to_citation_form($form);
      }
      elseif (strcmp($id, 'bceln_thesis_form') == 0) {
        islandora_entities_add_autocompletes_to_thesis_form($form);
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds autocomplete for the custom bceln citation and thesis forms.
 */
function oclsdora_form_xml_form_builder_ingest_form_alter(&$form, &$form_state, $form_id) {
  if (module_exists('islandora_scholar') && module_exists('islandora_entities')) {
    module_load_include('inc', 'islandora_entities', 'includes/utilities');
    if (isset($form_state['islandora']['step_storage']['xml_form_builder_metadata_step']['association']['id'])) {
      $id = $form_state['islandora']['step_storage']['xml_form_builder_metadata_step']['association']['id'];
      if (strcmp($id, 'bceln_citation_form') == 0) {
        islandora_entities_add_autocompletes_to_citation_form($form);
      }
      elseif (strcmp($id, 'bceln_thesis_form') == 0) {
        islandora_entities_add_autocompletes_to_thesis_form($form);
      }
    }
  }
}

/**
 * Implements hook_islandora_required_objects().
 */
function oclsdora_islandora_required_objects(IslandoraTuque $connection) {
  $module_path = drupal_get_path('module', 'oclsdora');

  $namespaces = array(
    'seneca',
    'conestoga',
    'fleming',
    'centennial',
    'loyalist',
    'georgian',
    'niagara',
  );

  // Create objects.
  $collections = array();
  foreach ($namespaces as $ns) {
    $collections[$ns] = $connection->repository->constructObject("$ns:root");
  }

  // Populate base objects.
  foreach ($collections as $object) {
    $object->owner = 'fedoraAdmin';
    $object->models = 'islandora:collectionCModel';
    $object->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');
  }

  // Populate Labels.
  $labels = array(
    'seneca' => 'Seneca',
    'conestoga' => 'Conestoga',
    'fleming' => 'Fleming',
    'centennial' => 'Centennial',
    'loyalist' => 'Loyalist',
    'georgian' => 'Georgian',
    'niagara' => 'Niagara',
  );
  foreach ($labels as $ns => $label) {
    $collections[$ns]->label = $label;
  }

  // Populate TNs.
  $tns = array(
    'seneca' => "$module_path/images/seneca-libraries-logo.png",
    'conestoga' => "$module_path/images/conestoga-logo.jpg",
    'fleming' => "$module_path/images/fleming_png.png",
    'centennial' => "$module_path/images/centennial_jpg.jpg",
    'loyalist' => "$module_path/images/loyalist_library.jpg",
    'georgian' => "$module_path/images/georgian_png.png",
    'niagara' => "$module_path/images/niagara-college.png",
  );

  // Populate home page images.
  $front_images = array(
    'seneca' => "$module_path/images/front/seneca/seneca.jpg",
    'conestoga' => "$module_path/images/front/conestoga/conestoga.jpg",
    'fleming' => "$module_path/images/front/fleming/fleming.jpg",
    'centennial' => "$module_path/images/front/centennial/centennial.jpg",
    'loyalist' => "$module_path/images/front/loyalist/loyalist.jpg",
    'georgian' => "$module_path/images/front/georgian/georgian.jpg",
    'niagara' => "$module_path/images/front/niagara/niagara.jpg",
  );
  foreach ($front_images as $ns => $path) {
    $datastream = $collections[$ns]->constructDatastream('front', 'M');
    $datastream->label = 'front';
    $datastream->mimetype = 'image/jpeg';
    $datastream->setContentFromFile($path, FALSE);
    $collections[$ns]->ingestDatastream($datastream);
  }

  // Create a 'front' datastream on the islandora:root object.
  $islandora_root = islandora_object_load('islandora:root');
  if (isset($islandora_root) && !isset($islandora_root['front'])) {
    $path = "$module_path/images/front/base/view.jpg";
    $datastream = $islandora_root->constructDatastream('front', 'M');
    $datastream->label = 'front';
    $datastream->mimetype = 'image/jpeg';
    $datastream->setContentFromFile($path, FALSE);
    $islandora_root->ingestDatastream($datastream);
  }

  $mimes = array(
    'seneca' => 'image/png',
    'conestoga' => 'image/jpeg',
    'fleming' => 'image/png',
    'centennial' => 'image/jpeg',
    'loyalist' => 'image/jpeg',
    'georgian' => 'image/png',
    'niagara' => 'image/png',
  );
  foreach ($tns as $ns => $path) {
    $datastream = $collections[$ns]->constructDatastream('TN', 'M');
    $datastream->label = 'Thumbnail';
    $datastream->mimetype = $mimes[$ns];
    $datastream->setContentFromFile($path, FALSE);
    $collections[$ns]->ingestDatastream($datastream);
  }

  // Populate collection policies.
  $collection_policies = array(
    'seneca' => "$module_path/xml/collection_policies/seneca.xml",
    'conestoga' => "$module_path/xml/collection_policies/conestoga.xml",
    'fleming' => "$module_path/xml/collection_policies/fleming.xml",
    'centennial' => "$module_path/xml/collection_policies/centennial.xml",
    'loyalist' => "$module_path/xml/collection_policies/loyalists.xml",
    'georgian' => "$module_path/xml/collection_policies/georgian.xml",
  );
  foreach ($collection_policies as $ns => $path) {
    $datastream = $collections[$ns]->constructDatastream('COLLECTION_POLICY', 'M');
    $datastream->label = 'Collection policy';
    $datastream->mimetype = 'application/xml';
    $datastream->setContentFromFile($path, FALSE);
    $collections[$ns]->ingestDatastream($datastream);
  }

  return array(
    'oclsdora' => array(
      'title' => 'Oclsdora',
      'objects' => array_values($collections),
    ),
  );
}

/**
 * Implements islandora_ip_embargo_set().
 */
function oclsdora_islandora_ip_embargo_set($pid, $parameters) {
  module_load_include('inc', 'islandora_gsearcher', 'includes/utilities');
  islandora_gsearcher_inform_gsearch($pid);
}

/**
 * Implements islandora_ip_embargo_lifted().
 */
function oclsdora_islandora_ip_embargo_lifted($pid) {
  module_load_include('inc', 'islandora_gsearcher', 'includes/utilities');
  islandora_gsearcher_inform_gsearch($pid);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function oclsdora_form_islandora_guided_ingest_simplified_ingest_form_alter(array &$form, array &$form_state) {
  $next_button = array(
    '#type' => 'button',
    '#value' => t('Next'),
    '#attributes' => array(
      'class' => array(
        'islandora-guided-ingest-next',
      ),
    ),
  );

  $prev_button = array(
    '#type' => 'button',
    '#value' => t('Previous'),
    '#attributes' => array(
      'class' => array(
        'islandora-guided-ingest-prev',
      ),
    ),
  );

  // Add our next/previous buttons.
  $form['tabs']['collection_tab']['next'] = $next_button;
  $form['tabs']['description']['prev'] = $prev_button;
  $form['tabs']['description']['next'] = $next_button;
  $form['tabs']['file']['prev'] = $prev_button;

  $form['#attached']['js'][] = array(
    'type' => 'file',
    'data' => drupal_get_path('module', 'oclsdora') . '/js/tab_nav.js',
  );
}

/**
 * Helper function to validate a Drupal form element ISO 8601 value.
 *
 * @param array $element
 *   The Drupal Form element to validate.
 * @param array $form_state
 *   The Drupal Form State.
 * @param array $form
 *   The Drupal Form.
 *
 * @return bool|null
 *   False if the value doesn't match ISO 8601 format.
 */
function oclsdora_iso8601_validate(array $element, array &$form_state, array $form) {
  if (!empty($element['#value'])) {
    try {
      $date = new DateTime($element['#value']);
    }
    catch (Exception $e) {
      return form_error($element, t('Enter a date in the format: YYYY-MM-DD for !element', array('!element' => $element['#title'])));
    }
    // Check if the element's value does not match a subset of ISO 8601 formats
    // (ex: 1990-01-01 or 1990-01-01T00:00:00-0400).
    if ($date->format("Y-m-d") !== $element['#value'] && $date->format("Y-m-d\TH:i:sO") !== $element['#value']) {
      return form_error($element, t('Enter a date in the format: YYYY-MM-DD for !element', array('!element' => $element['#title'])));
    }
  }
}

/**
 * Implements hook_xml_form_builder_get_self_transforms().
 */
function oclsdora_xml_form_builder_get_self_transforms() {
  return array(
    'ocls_cleanup_mods_extended.xslt' => 'sites/all/modules/oclsdora/self_transforms/ocls_cleanup_mods_extended.xslt',
  );
}
